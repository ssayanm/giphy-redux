{"version":3,"sources":["components/Gif.js","components/GifList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Gif","image","className","alt","src","GifList","props","gifs","map","gif","key","id","images","downsized","url","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","setSearchField","text","dispatch","fetch","then","response","json","items","payload","data","catch","App","onRequestGifs","onSearchChange","connect","searchGifs","isPending","event","target","value","Boolean","window","location","hostname","match","initialStateGifs","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.234e1e98.chunk.js","sourcesContent":["import React from 'react';\n\nconst Gif = ({ image }) => {\n\t//const { image } = props;\n\treturn (\n\t    <div className=\"bg-light-blue tc dib br1 pa1 ma2 grow bw1 shadow-1\">\n\t    \t\n\t    \t <img alt='gifs' src={image} />\n\t    \t  <div>\n        \n      </div>\n\t    </div>\n  );\n}\n\n\n\nexport default Gif;\n\n\n","import React from 'react';\nimport Gif from '../components/Gif';\n\nconst GifList = (props) => {\n\tconst { gifs } = props;\n\treturn (\n\t    <div className='tc'>\n\t    \t{\n\t\t    gifs.map((gif) => {\n\t\t\treturn ( \n\t\t\t\t<Gif \n\t\t\t\t\tkey={gif.id} \n\t\t\t\t\timage={gif.images.downsized.url}\n\t\t\t\t\t\n\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t    </div>\n  );\n}\n\nexport default GifList;\n\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    \n\treturn (\n\t    <div className='pa2'>\n\t    \t<input \n\t    \t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t    \t\ttype=\"search\" \n\t    \t\tplaceholder=\"Search Gifs\" \n\t    \t\tonChange={searchChange} \n                //onChange={event => this.onInputChange(event.target.value)} \n\t    \t/>\n\t    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t    <div className='tc' style={{overflowY: 'scroll', border: '1px solid #000', height: '700px'}}>\n\t    \t{props.children}\n\t    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(){\n\t    super();\n\t    this.state = {\n\t    \thasError:false\n\t    }\n  \t}\n\n  \tcomponentDidCatch(error, info){\n  \t\tthis.setState( {hasError: true })\n  \t}\n\n  \trender(){\n  \t\tif(this.state.hasError){\n  \t\t\treturn <h1>Opps !!</h1>\n  \t\t} else {\n  \t\t\treturn this.props.children;\n  \t\t}\n  \t}\n}\n\nexport default ErrorBoundary;\n","import {\n\tREQUEST_GIFS_PENDING,\n\tREQUEST_GIFS_SUCCESS,\n\tREQUEST_GIFS_FAILED,\n\tAPI_URL,\n\tAPI_KEY,\n\tLIMIT,\n\tDEFAULT_QUERY \n} from './constants'; \n\nexport const setSearchField = text => dispatch => {\n  dispatch({ type: REQUEST_GIFS_PENDING });\n  fetch(API_URL + (text || DEFAULT_QUERY) + API_KEY + LIMIT)\n    .then(response => response.json())\n    .then(items =>\n      dispatch({ type: REQUEST_GIFS_SUCCESS, payload: items.data })\n    )\n    .catch(error => dispatch({ type: REQUEST_GIFS_FAILED, payload: error }));\n};\n","export const API_URL = 'https://api.giphy.com/v1/gifs/search?q=';\nexport const API_KEY = '&api_key=vymc5XlA7eUV2Idx6Qv6nz61ltpL16sT';\nexport const LIMIT ='&limit=10'\nexport const DEFAULT_QUERY = 'ryan';\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_GIFS_PENDING = 'REQUEST_GIFS_PENDING';\nexport const REQUEST_GIFS_SUCCESS = 'REQUEST_GIFS_SUCCESS';\nexport const REQUEST_GIFS_FAILED = 'REQUEST_GIFS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport GifList from '../components/GifList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField } from '../actions';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n  return {\n    gifs: state.searchGifs.gifs,\n    isPending: state.searchGifs.isPending,\n    error: state.searchGifs.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestGifs: () => dispatch(setSearchField())\n  }\n}\n\nclass App extends Component {\n  componentDidMount(){\n        this.props.onRequestGifs();\n  }\n\n  render(){  \n    const { onSearchChange, gifs } = this.props;\n        return (\n        <div className=\"App tc\">\n          <h1 className=\"f1\">Gif Search Engine</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <GifList gifs={gifs}/>\n            </ErrorBoundary>  \n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n\tREQUEST_GIFS_PENDING,\n\tREQUEST_GIFS_SUCCESS,\n\tREQUEST_GIFS_FAILED,\n} from './constants'; \n\nconst initialStateGifs = {\n\tisPending: false,\n\tgifs: [],\n\terror:''\n}\n\nexport const searchGifs = (state=initialStateGifs, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_GIFS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_GIFS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {gifs: action.payload, isPending: false})\n\t\tcase REQUEST_GIFS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchGifs } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchGifs })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}